library(readxl)
REL2001 <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "REL2001")
View(REL2001)
library(readxl)
REL2022 <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "REL2022")
View(REL2022)
library(readxl)
META <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "META")
View(META)
library(readxl)
REL2001 <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "REL2001")
View(REL2001)
library(readxl)
REL2022 <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "REL2022")
View(REL2022)
library(readxl)
META <- read_excel("ARAVO_RESURVEY_GRID.xlsx",
sheet = "META")
View(META)
```{r}
rel2001 = REL2001
rel2022 = REL2022
meta = META
rel2001
# Charger les packages
library(readxl)
library(dplyr)
library(vegan)
# Filtrer les ID comparables : yes/yes dans meta
valid_ids <- meta %>%
filter(DATA_2001 == "yes" & DATA_2022 == "yes") %>%
pull(ID)
rel2001 <- rel2001 %>% filter(ID %in% valid_ids)
rel2022 <- rel2022 %>% filter(ID %in% valid_ids)
rel2001 <- rel2001 %>% filter(ID %in% valid_ids)
rel2022 <- rel2022 %>% filter(ID %in% valid_ids)
```{r}
# Ajouter une colonne "Year"
rel2001$Year <- 2001
rel2022$Year <- 2022
# Ajouter une colonne "Year"
rel2001$Year <- 2001
rel2022$Year <- 2022
```{r}
# Supprimer les colonnes non pertinentes (sommes, completed...)
rel2001_clean <- rel2001 %>%
select(-SOMME)
rel2022_clean <- rel2022 %>%
select(-contains("COMPLETED"), -HABITAT)
rel2022_clean <- rel2022 %>%
select(-contains("COMPLETED"), -HABITAT)
```{r}
# Harmoniser les noms des colonnes espèces
common_species <- intersect(names(rel2001_clean), names(rel2022_clean))
meta_cols <- c("ROW","COL","ID","Year")
species_cols <- setdiff(common_species, meta_cols)
rel2001_clean <- rel2001_clean %>% select(all_of(meta_cols), all_of(species_cols))
rel2022_clean <- rel2022_clean %>% select(all_of(meta_cols), all_of(species_cols))
```{r}
# S'assurer que toutes les colonnes espèces sont du même type (numeric)
for (col in species_cols) {
rel2001_clean[[col]] <- as.numeric(rel2001_clean[[col]])
rel2022_clean[[col]] <- as.numeric(rel2022_clean[[col]])
}
# Supprimer les lignes contenant des NA
rel2001_clean <- rel2001_clean %>% drop_na(all_of(species_cols))
rel2022_clean <- rel2022_clean %>% drop_na(all_of(species_cols))
# Fusionner les deux jeux
all_data <- bind_rows(rel2001_clean, rel2022_clean)
all_data
# Fusionner les deux jeux
all_data <- bind_rows(rel2001_clean, rel2022_clean)
all_data
if("Sol nu" %in% names(all_data)) {
all_data <- all_data %>% select(-`Sol nu`)
}
# Mettre à jour la liste des colonnes espèces
species_cols_filtered <- setdiff(species_cols, "Sol nu")
# Supprimer les lignes où aucune espèce restante n'est présente
all_data <- all_data %>% filter(rowSums(select(., all_of(species_cols_filtered))) > 0)
# Supprimer les lignes contenant des NA (sécurité)
all_data <- all_data %>% drop_na(all_of(species_cols_filtered))
# Identifier ID communes
common_IDs <- intersect(rel2001_clean$ID, rel2022_clean$ID)
# Filtrer les deux jeux pour ne garder que les ID communes
rel2001_common <- rel2001_clean %>% filter(ID %in% common_IDs)
rel2022_common <- rel2022_clean %>% filter(ID %in% common_IDs)
# Fusionner
all_data_common <- bind_rows(rel2001_common, rel2022_common)
# Supprimer les NA par sécurité
all_data_common <- all_data_common %>% drop_na(all_of(species_cols_filtered))
# Supprimer les NA par sécurité
all_data_common <- all_data_common %>% drop_na(all_of(species_cols_filtered))
```{r}
all_data_common
# Supprimer lignes vides
all_data_common_clean <- all_data_common %>%
filter(rowSums(select(., all_of(species_cols_filtered))) > 0)
# --- 2. Matrice présence/absence ---
comm_matrix <- as.matrix(all_data_common_clean[, species_cols_filtered])
comm_matrix_bin <- (comm_matrix > 0) * 1
# Garder les IDs correspondant aux lignes conservées
keep_rows <- rowSums(comm_matrix_bin) > 0
comm_matrix_bin <- comm_matrix_bin[keep_rows, ]
final_IDs <- all_data_common_clean$ID[keep_rows]
years <- all_data_common_clean$Year[keep_rows]
# --- 3. Calcul de la distance Jaccard ---
dist_jac <- vegdist(comm_matrix_bin, method = "jaccard")
# --- 4. Clustering hiérarchique ---
clust <- hclust(dist_jac, method = "ward.D2")
